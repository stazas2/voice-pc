// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±–ª–∞—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
const { handler } = require('./cloud/index.js');

// –¢–µ—Å—Ç 1: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≤—ã–∫–∞
async function testActivation() {
  console.log('\n=== –¢–ï–°–¢ 1: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≤—ã–∫–∞ ===');
  const event = {
    request: { command: '–≥–æ–ª–æ–≤–Ω–æ–π –æ—Ç—Ä—ã–≤' },
    session: { session_id: 'test-1' }
  };
  
  const result = await handler(event, {});
  console.log('–ó–∞–ø—Ä–æ—Å:', event.request.command);
  console.log('–û—Ç–≤–µ—Ç:', result.response.text);
}

// –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–Ω–æ—Ç
async function testNotepad() {
  console.log('\n=== –¢–ï–°–¢ 2: –ö–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–Ω–æ—Ç ===');
  const event = {
    request: { command: '–∑–∞–ø—É—Å—Ç–∏ –±–ª–æ–∫–Ω–æ—Ç' },
    session: { session_id: 'test-2' }
  };
  
  const result = await handler(event, {});
  console.log('–ó–∞–ø—Ä–æ—Å:', event.request.command);
  console.log('–û—Ç–≤–µ—Ç:', result.response.text);
}

// –¢–µ—Å—Ç 3: –ö–æ–º–∞–Ω–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç
async function testScreenshot() {
  console.log('\n=== –¢–ï–°–¢ 3: –ö–æ–º–∞–Ω–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç ===');
  const event = {
    request: { command: '—Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω' },
    session: { session_id: 'test-3' }
  };
  
  const result = await handler(event, {});
  console.log('–ó–∞–ø—Ä–æ—Å:', event.request.command);
  console.log('–û—Ç–≤–µ—Ç:', result.response.text);
}

// –¢–µ—Å—Ç 4: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async function testUnknown() {
  console.log('\n=== –¢–ï–°–¢ 4: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ===');
  const event = {
    request: { command: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' },
    session: { session_id: 'test-4' }
  };
  
  const result = await handler(event, {});
  console.log('–ó–∞–ø—Ä–æ—Å:', event.request.command);
  console.log('–û—Ç–≤–µ—Ç:', result.response.text);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±–ª–∞—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...\n');
  
  try {
    await testActivation();
    await testNotepad();
    await testScreenshot();
    await testUnknown();
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

runTests();