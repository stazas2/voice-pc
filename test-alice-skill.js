// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –Ω–∞–≤—ã–∫–∞ –ê–ª–∏—Å—ã
const { default: fetch } = require('node-fetch');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ alice-skill-complete.js
const WEBHOOK_URL = 'https://87175e170555.ngrok-free.app/webhook';

const COMMAND_MAPPINGS = {
  '–∑–∞–ø—É—Å—Ç–∏ –±–ª–æ–∫–Ω–æ—Ç': { command: 'open_notepad' },
  '–æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç': { command: 'open_notepad' },
  '–±–ª–æ–∫–Ω–æ—Ç': { command: 'open_notepad' },
  '–æ—Ç–∫—Ä–æ–π —é—Ç—É–±': { command: 'open_chrome', url: 'https://youtube.com' },
  '–∑–∞–ø—É—Å—Ç–∏ —é—Ç—É–±': { command: 'open_chrome', url: 'https://youtube.com' },
  '—Ç–µ—Å—Ç': { command: 'say_ok' },
  '–ø—Ä–æ–≤–µ—Ä–∫–∞': { command: 'say_ok' }
};

function parseUserCommand(userText) {
  const text = userText.toLowerCase().trim();
  if (COMMAND_MAPPINGS[text]) {
    return COMMAND_MAPPINGS[text];
  }
  return { command: 'say_ok' };
}

async function testAliceSkill(userText) {
  const sessionId = 'test-' + Date.now();
  
  console.log(`\nüé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "${userText}"`);
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ê–ª–∏—Å—ã –∫ –Ω–∞–≤—ã–∫—É
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        request: { command: userText },
        session: { session_id: sessionId }
      })
    });
    
    const result = await response.json();
    console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, result);
    
    if (result.response) {
      console.log(`ü§ñ –ê–ª–∏—Å–∞ –æ—Ç–≤–µ—Ç–∏—Ç: "${result.response.text}"`);
    }
    
    return result;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
    return null;
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
async function runTests() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ê–ª–∏—Å—ã...\n');
  
  const testCommands = [
    '—Ç–µ—Å—Ç',
    '–±–ª–æ–∫–Ω–æ—Ç',
    '–∑–∞–ø—É—Å—Ç–∏ –±–ª–æ–∫–Ω–æ—Ç',
    '–æ—Ç–∫—Ä–æ–π —é—Ç—É–±',
    '–ø—Ä–æ–≤–µ—Ä–∫–∞'
  ];
  
  for (const command of testCommands) {
    await testAliceSkill(command);
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ø–∞—É–∑–∞ 1 —Å–µ–∫
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

runTests().catch(console.error);